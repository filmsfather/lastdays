{
  "master": {
    "tasks": [
      {
        "id": 1,
        "title": "프로젝트 초기 설정 및 데이터베이스 스키마 구축",
        "description": "Next.js App Router 프로젝트 생성, Tailwind CSS 설정, Supabase PostgreSQL 데이터베이스 연결 및 테이블 스키마 구축",
        "details": "Next.js 14+ App Router로 프로젝트 생성, Tailwind CSS 설치 및 설정, Supabase 프로젝트 생성 후 PostgreSQL 데이터베이스에 accounts, tickets, reservation_slots, reservations, problems, sessions, scores, feedbacks, checklist_items, student_reflections 테이블 생성. 각 테이블에 필요한 인덱스 추가: accounts(role, class_name, name), tickets(student_id), reservation_slots(date, block, teacher_id), reservations(student_id, created_at desc), sessions(reservation_id). 환경변수 설정 및 Supabase 클라이언트 초기화.",
        "testStrategy": "데이터베이스 연결 테스트, 각 테이블 생성 확인, 인덱스 성능 테스트, 환경변수 로드 확인",
        "priority": "high",
        "dependencies": [],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Next.js 14+ App Router 프로젝트 생성 및 기본 설정",
            "description": "Next.js 14 이상 버전으로 App Router를 사용하는 새 프로젝트를 생성하고 기본 설정을 완료합니다.",
            "dependencies": [],
            "details": "npx create-next-app@latest를 사용하여 프로젝트 생성, App Router 옵션 선택, TypeScript 설정, 기본 폴더 구조 확인 및 초기 설정 파일들 검토",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Tailwind CSS 설치 및 설정",
            "description": "Tailwind CSS를 프로젝트에 설치하고 필요한 설정을 완료합니다.",
            "dependencies": [
              "1.1"
            ],
            "details": "npm install tailwindcss postcss autoprefixer, tailwind.config.js 설정, globals.css에 Tailwind directives 추가, 기본 스타일 설정 확인",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "Supabase 프로젝트 생성 및 환경변수 설정",
            "description": "Supabase 프로젝트를 생성하고 Next.js 프로젝트와 연결을 위한 환경변수를 설정합니다.",
            "dependencies": [
              "1.1"
            ],
            "details": "Supabase 대시보드에서 새 프로젝트 생성, API URL과 anon key 확보, .env.local 파일에 NEXT_PUBLIC_SUPABASE_URL, NEXT_PUBLIC_SUPABASE_ANON_KEY 설정, Supabase 클라이언트 라이브러리 설치",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "Supabase 클라이언트 초기화 및 연결 테스트",
            "description": "Supabase 클라이언트를 초기화하고 데이터베이스 연결을 테스트합니다.",
            "dependencies": [
              "1.3"
            ],
            "details": "lib/supabase.ts 파일 생성, createClient 함수로 Supabase 클라이언트 초기화, 데이터베이스 연결 테스트 코드 작성 및 실행",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "데이터베이스 테이블 스키마 생성",
            "description": "10개의 필요한 테이블(accounts, tickets, reservation_slots, reservations, problems, sessions, scores, feedbacks, checklist_items, student_reflections)을 생성합니다.",
            "dependencies": [
              "1.4"
            ],
            "details": "Supabase SQL Editor에서 각 테이블의 CREATE TABLE 문 실행, 컬럼 타입 및 제약조건 설정, 외래키 관계 설정, 각 테이블 생성 후 구조 확인",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 6,
            "title": "데이터베이스 인덱스 생성 및 성능 최적화",
            "description": "각 테이블에 필요한 인덱스를 생성하여 데이터베이스 성능을 최적화합니다.",
            "dependencies": [
              "1.5"
            ],
            "details": "accounts(role, class_name, name), tickets(student_id), reservation_slots(date, block, teacher_id), reservations(student_id, created_at desc), sessions(reservation_id)에 대한 인덱스 생성, 인덱스 성능 테스트 및 최종 검증",
            "status": "done",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 2,
        "title": "인증 시스템 구현",
        "description": "이름/반/역할 + 4자리 PIN 기반 인증 시스템과 세션 관리 구현",
        "details": "POST /api/auth/login API 엔드포인트 구현으로 name, className, pin 검증 후 HttpOnly, Secure 세션 쿠키 발급. POST /api/auth/logout 구현. 미들웨어를 통한 세션 검증 및 사용자 정보 추출. 역할별 권한 체크 헬퍼 함수 구현. PIN은 평문으로 저장하되 로그인 시도/성공 로깅 구현.",
        "testStrategy": "로그인/로그아웃 기능 테스트, 세션 쿠키 보안 설정 확인, 권한별 접근 제어 테스트, PIN 평문 저장 확인",
        "priority": "high",
        "dependencies": [
          1
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "인증 API 엔드포인트 구현",
            "description": "POST /api/auth/login과 POST /api/auth/logout API 엔드포인트를 구현하여 이름/반/PIN 검증 및 세션 쿠키 발급 처리",
            "dependencies": [],
            "details": "POST /api/auth/login에서 name, className, pin을 받아 데이터베이스와 대조 검증 후 성공 시 HttpOnly, Secure 옵션이 설정된 세션 쿠키 발급. POST /api/auth/logout에서 세션 쿠키 삭제 처리. 에러 케이스별 적절한 HTTP 상태 코드 반환.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "세션 관리 시스템 구현",
            "description": "세션 데이터 저장, 조회, 삭제를 위한 세션 관리 유틸리티 함수들과 세션 테이블 활용 로직 구현",
            "dependencies": [
              "2.1"
            ],
            "details": "sessions 테이블을 활용한 세션 생성, 조회, 삭제 함수 구현. 세션 만료 시간 관리 및 자동 정리 로직. 세션 토큰 생성 및 검증 유틸리티. 보안을 위한 세션 갱신 메커니즘 구현.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "인증 미들웨어 구현",
            "description": "API 라우트에서 세션 검증 및 사용자 정보 추출을 위한 미들웨어 구현",
            "dependencies": [
              "2.2"
            ],
            "details": "쿠키에서 세션 토큰 추출 후 데이터베이스 검증하여 사용자 정보 리턴하는 미들웨어. 보호된 라우트에 적용할 수 있는 고차 함수 형태로 구현. 세션 만료 처리 및 에러 핸들링 포함.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "역할별 권한 체크 시스템 구현",
            "description": "학생/교사/관리자 역할별 접근 권한을 체크하는 헬퍼 함수들과 권한 검증 로직 구현",
            "dependencies": [
              "2.3"
            ],
            "details": "사용자 역할(student/teacher/admin)별 권한 체크 헬퍼 함수. 페이지 및 API 접근 권한 검증. 권한 없는 접근 시 적절한 리다이렉트 또는 에러 응답 처리. 역할별 UI 컴포넌트 표시 제어.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "인증 로깅 시스템 구현",
            "description": "로그인 시도 및 성공 이벤트에 대한 감사 로깅 시스템 구현",
            "dependencies": [
              "2.1"
            ],
            "details": "로그인 시도(성공/실패), 로그아웃, 세션 만료 등 인증 관련 이벤트를 데이터베이스에 기록. 로그 데이터 구조 정의 및 저장 함수 구현. IP 주소, 타임스탬프, 사용자 정보 포함한 상세 로깅.",
            "status": "done",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 3,
        "title": "관리자 계정 및 이용권 관리 시스템",
        "description": "관리자 권한으로 계정 CRUD, 주간 이용권 일괄 발급, 개별 이용권 추가 발급 기능 구현",
        "details": "POST /api/admin/accounts, PATCH /api/admin/accounts/:id API로 계정 생성/수정. POST /api/admin/tickets/weekly-issue로 모든 학생에게 주간 10장 일괄 발급, POST /api/admin/tickets/grant로 개별 학생 이용권 추가 발급. 트랜잭션을 통한 이용권 발급 원자성 보장. 관리자 전용 대시보드에서 계정 목록, 이용권 현황 표시.",
        "testStrategy": "계정 CRUD 기능 테스트, 주간 이용권 일괄 발급 검증, 개별 이용권 추가 발급 테스트, 트랜잭션 롤백 테스트",
        "priority": "high",
        "dependencies": [
          2
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "계정 CRUD API 엔드포인트 구현",
            "description": "관리자 권한으로 계정 생성, 수정, 조회, 삭제 기능을 위한 API 엔드포인트 구현",
            "dependencies": [],
            "details": "POST /api/admin/accounts로 계정 생성 (이름, 반, 역할, PIN 설정), PATCH /api/admin/accounts/:id로 계정 정보 수정, GET /api/admin/accounts로 전체 계정 목록 조회, DELETE /api/admin/accounts/:id로 계정 삭제. 관리자 권한 검증 미들웨어 적용하고 입력 데이터 유효성 검사 포함.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "주간 이용권 일괄 발급 시스템 구현",
            "description": "모든 학생에게 주간 이용권을 일괄로 발급하는 시스템 구현",
            "dependencies": [
              "3.1"
            ],
            "details": "POST /api/admin/tickets/weekly-issue 엔드포인트 구현하여 모든 학생 계정에 주간 10장 이용권 일괄 발급. 트랜잭션을 사용하여 발급 과정의 원자성 보장하고, 발급 실패 시 전체 롤백 처리. 발급 결과 로깅 및 성공/실패 응답 반환.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "개별 이용권 추가 발급 기능 구현",
            "description": "특정 학생에게 개별적으로 이용권을 추가 발급하는 기능 구현",
            "dependencies": [
              "3.2"
            ],
            "details": "POST /api/admin/tickets/grant 엔드포인트 구현하여 student_id와 추가할 이용권 수량을 받아 개별 학생에게 이용권 발급. 트랜잭션 처리로 발급 원자성 보장하고, 학생 존재 여부 확인 후 이용권 추가. 발급 이력 로깅 및 결과 응답.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "관리자 대시보드 UI 구현",
            "description": "관리자 전용 대시보드에서 계정 목록과 이용권 현황을 표시하는 UI 구현",
            "dependencies": [
              "3.3"
            ],
            "details": "/dashboard/admin 페이지에서 전체 계정 목록을 테이블 형태로 표시 (이름, 반, 역할, 잔여 이용권). 이용권 현황 섹션에서 전체/반별 이용권 통계 표시. 주간 일괄 발급 버튼과 개별 발급 모달 구현. 계정 편집/삭제 기능 UI 포함.",
            "status": "done",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 4,
        "title": "슬롯 관리 및 예약 시스템 핵심 로직",
        "description": "주간 슬롯 생성/관리, 예약 생성 시 즉시 이용권 차감, 예약 수정 및 검증 로직 구현",
        "details": "POST /api/admin/slots로 주간 오전/오후 슬롯 생성, GET /api/admin/slots?week=YYYY-WW로 주간 슬롯 조회. POST /api/reservations로 예약 생성 시 즉시 티켓 차감(트랜잭션 내), PATCH /api/reservations/:id로 전날까지 예약 수정 허용. 예약 규칙 검증: 하루 최대 3회, 오전/오후 교차 불가, 동일 교사 2회 제한. created_at 기준 순번 계산 로직 구현.",
        "testStrategy": "슬롯 생성/조회 테스트, 예약 생성 시 티켓 즉시 차감 확인, 예약 규칙 위반 시 실패 테스트, 전날까지 수정 가능/당일 수정 불가 검증",
        "priority": "high",
        "dependencies": [
          3
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "주간 슬롯 생성 및 조회 API 구현",
            "description": "관리자용 주간 슬롯 생성 및 조회 API 엔드포인트 구현",
            "dependencies": [],
            "details": "POST /api/admin/slots API로 주간 오전/오후 슬롯 생성 로직 구현. 요청 데이터 검증(주차, 요일, 블록, 교사ID), reservation_slots 테이블 생성. GET /api/admin/slots?week=YYYY-WW API로 특정 주차 슬롯 조회 기능 구현. 날짜/시간 유효성 검증 및 중복 생성 방지 로직 포함.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "예약 생성 시 즉시 티켓 차감 트랜잭션 로직",
            "description": "예약 생성과 동시에 이용권을 즉시 차감하는 트랜잭션 처리 구현",
            "dependencies": [
              "4.1"
            ],
            "details": "POST /api/reservations API에서 예약 생성 시 tickets 테이블의 remaining_count 차감을 동일 트랜잭션 내에서 처리. 이용권 잔여량 확인, 예약 생성, 티켓 차감을 원자적으로 수행. 트랜잭션 실패 시 롤백 처리 및 적절한 에러 메시지 반환.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "복합 예약 규칙 검증 시스템",
            "description": "하루 최대 3회, 오전/오후 교차 불가, 동일 교사 2회 제한 규칙 검증",
            "dependencies": [
              "4.2"
            ],
            "details": "예약 생성/수정 시 적용되는 복합 규칙 검증 로직 구현: 1) 당일 예약 횟수 3회 제한 확인, 2) 오전/오후 블록 교차 예약 방지, 3) 동일 교사 2회 제한 검증. 각 규칙별 위반 시 구체적인 에러 메시지 반환 및 검증 헬퍼 함수 모듈화.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "created_at 기준 순번 계산 로직",
            "description": "예약 생성 시간 기준으로 동일 슬롯 내 순번을 계산하는 로직 구현",
            "dependencies": [
              "4.3"
            ],
            "details": "reservations 테이블의 created_at 컬럼을 기준으로 동일 슬롯(날짜+블록+교사) 내에서 순번 자동 계산. ORDER BY created_at ASC로 정렬하여 순번 부여. 예약 취소 시 순번 재계산 로직 및 순번 조회를 위한 헬퍼 함수 구현.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "예약 수정 API 및 전날까지 제한 로직",
            "description": "예약 수정 기능과 전날까지만 수정 가능한 제한 로직 구현",
            "dependencies": [
              "4.4"
            ],
            "details": "PATCH /api/reservations/:id API 구현으로 예약 수정 기능 제공. 현재 시간과 예약 날짜 비교하여 전날 23:59까지만 수정 허용. 수정 시 기존 예약 규칙 재검증 및 순번 재계산. 당일 또는 지난 예약 수정 시도 시 적절한 에러 메시지 반환.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 6,
            "title": "예약 시스템 에러 핸들링 및 응답 표준화",
            "description": "예약 관련 모든 API의 일관된 에러 핸들링 및 응답 형식 구현",
            "dependencies": [
              "4.5"
            ],
            "details": "예약 생성/수정/조회 API의 통일된 에러 응답 형식 정의. 비즈니스 로직 에러(규칙 위반, 이용권 부족 등)와 시스템 에러 구분. 에러 코드 체계 설계 및 클라이언트 친화적인 메시지 제공. 로깅 레벨 설정 및 디버깅을 위한 상세 정보 기록.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 7,
            "title": "예약 시스템 통합 테스트 및 성능 최적화",
            "description": "전체 예약 시스템의 통합 테스트 작성 및 데이터베이스 성능 최적화",
            "dependencies": [
              "4.6"
            ],
            "details": "슬롯 생성부터 예약 완료까지 전체 플로우 통합 테스트 작성. 동시성 상황에서의 트랜잭션 처리 테스트. 대량 예약 시나리오 성능 테스트 및 병목 지점 식별. 필요한 데이터베이스 인덱스 추가 및 쿼리 최적화. 예약 시스템 부하 테스트 수행.",
            "status": "done",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 5,
        "title": "문제 관리 및 공개 시스템",
        "description": "교사의 문제 초안 작성, 공개, 아카이브 기능과 사전열람 리드타임 기반 자동 공개 로직 구현",
        "details": "POST /api/teacher/problems로 문제 초안 생성(available_date, is_active=false, preview_lead_minutes 설정), PATCH /api/teacher/problems/:id로 수정, POST /api/teacher/problems/:id/publish로 공개(is_active=true), POST /api/teacher/problems/:id/archive로 아카이브. 자동 공개 로직: scheduledStartAt = blockStart + (queuePosition-1)×10분, canShowProblem = now ≥ scheduledStartAt - preview_lead_minutes. 문제 복제 기능 구현.",
        "testStrategy": "문제 CRUD 기능 테스트, 공개/아카이브 상태 변경 확인, 사전열람 시간 계산 로직 검증, 자동 공개 타이밍 테스트",
        "priority": "high",
        "dependencies": [
          4
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "문제 CRUD API 엔드포인트 구현",
            "description": "교사의 문제 초안 생성, 수정을 위한 기본 API 엔드포인트 구현",
            "dependencies": [],
            "details": "POST /api/teacher/problems API로 문제 초안 생성 (available_date, is_active=false, preview_lead_minutes 설정). PATCH /api/teacher/problems/:id API로 문제 수정. 문제 데이터 검증 및 권한 체크 로직 포함.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "문제 공개 및 아카이브 API 구현",
            "description": "문제 공개와 아카이브 상태 변경을 위한 API 엔드포인트 구현",
            "dependencies": [
              "5.1"
            ],
            "details": "POST /api/teacher/problems/:id/publish API로 문제 공개 (is_active=true 설정). POST /api/teacher/problems/:id/archive API로 문제 아카이브. 상태 변경 시 적절한 검증 및 로깅 구현.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "사전열람 리드타임 계산 로직 구현",
            "description": "문제 공개 시간과 사전열람 가능 시점을 계산하는 핵심 로직 구현",
            "dependencies": [
              "5.1"
            ],
            "details": "scheduledStartAt = blockStart + (queuePosition-1)×10분 계산 로직 구현. canShowProblem = now ≥ scheduledStartAt - preview_lead_minutes 판단 로직. 시간대 처리 및 정확한 시간 계산 보장.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "자동 문제 공개 스케줄링 시스템 구현",
            "description": "계산된 시간에 따라 문제를 자동으로 공개하는 스케줄링 시스템 구현",
            "dependencies": [
              "5.3"
            ],
            "details": "사전열람 리드타임 계산 결과를 바탕으로 한 자동 공개 스케줄러 구현. 백그라운드 작업으로 정기적인 공개 상태 체크 및 업데이트. 시간 기반 트리거 로직 구현.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "문제 복제 기능 구현",
            "description": "기존 문제를 복사하여 새로운 문제로 생성하는 복제 기능 구현",
            "dependencies": [
              "5.1"
            ],
            "details": "POST /api/teacher/problems/:id/duplicate API 구현. 원본 문제의 모든 데이터를 복사하되 새로운 ID와 초기 상태로 설정. 복제 시 제목에 '(복사본)' 추가 및 적절한 메타데이터 업데이트.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 6,
            "title": "문제 공개 권한 관리 및 검증 시스템 구현",
            "description": "교사별 문제 접근 권한과 공개 상태 검증을 위한 보안 시스템 구현",
            "dependencies": [
              "5.2",
              "5.4"
            ],
            "details": "교사 권한별 문제 접근 제어 로직 구현. 문제 공개/수정 권한 검증. 무결성 검사 및 부적절한 접근 시도 방지. 권한 위반 시 적절한 에러 처리 및 로깅.",
            "status": "done",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 6,
        "title": "학생 예약 및 문제 선택 시스템",
        "description": "학생의 예약 조회, 생성, 수정 및 당일 문제 선택으로 피드백 페이지 자동 생성 기능 구현",
        "details": "GET /api/me/tickets로 이용권 잔여 조회, GET /api/slots로 슬롯 목록 조회, POST /api/reservations로 예약 생성, PATCH /api/reservations/:id로 예약 수정. POST /api/reservations/:id/select-problem으로 당일 문제 선택 시 sessions 테이블에 레코드 생성하며 problem_snapshot으로 문제 내용 저장. student_reflections 초기 레코드 생성. /dashboard/student 페이지에서 예약 관리 UI 구현.",
        "testStrategy": "이용권 잔여 조회 테스트, 예약 생성/수정 기능 검증, 문제 선택 시 세션 생성 확인, 문제 스냅샷 저장 검증",
        "priority": "medium",
        "dependencies": [
          5
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "이용권 조회 API 구현",
            "description": "학생의 잔여 이용권 정보를 조회하는 GET /api/me/tickets API 엔드포인트 구현",
            "dependencies": [],
            "details": "현재 로그인한 학생의 tickets 테이블에서 잔여 이용권 수량을 조회하는 API 구현. 세션 미들웨어를 통한 인증 확인 후 student_id로 필터링하여 잔여 이용권 반환. JSON 응답 형태로 { remaining_tickets: number } 구조 구현.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "예약 가능한 슬롯 조회 API 구현",
            "description": "예약 가능한 시간 슬롯 목록을 조회하는 GET /api/slots API 엔드포인트 구현",
            "dependencies": [],
            "details": "reservation_slots 테이블에서 예약 가능한 슬롯 목록 조회. 현재 시점 이후의 슬롯만 필터링하고, 이미 예약된 슬롯은 제외. 교사별, 날짜별, 블록별로 정렬된 결과 반환. { id, date, block, teacher_name, available } 형태로 응답 구조 설계.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "예약 생성 및 수정 API 구현",
            "description": "학생 예약 생성(POST)과 수정(PATCH) API 엔드포인트 구현",
            "dependencies": [
              "6.1",
              "6.2"
            ],
            "details": "POST /api/reservations로 새 예약 생성 - 이용권 차감 로직 포함하여 tickets 테이블 업데이트. PATCH /api/reservations/:id로 기존 예약 수정 - 취소 시 이용권 복구. 예약 시간 충돌 검증, 당일 예약 제한 등 비즈니스 룰 적용. 트랜잭션 처리로 데이터 일관성 보장.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "문제 선택 및 세션 생성 API 구현",
            "description": "당일 문제 선택 시 세션을 생성하고 문제 스냅샷을 저장하는 POST /api/reservations/:id/select-problem API 구현",
            "dependencies": [
              "6.3"
            ],
            "details": "당일 예약에서 문제 선택 시 sessions 테이블에 새 레코드 생성. problems 테이블에서 선택한 문제의 전체 내용을 problem_snapshot JSONB 필드에 저장하여 문제 변경에 영향받지 않도록 구현. 동시에 student_reflections 테이블에 초기 빈 레코드 생성. 당일 예약만 허용하는 검증 로직 포함.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "학생 예약 관리 UI 구현",
            "description": "/dashboard/student 페이지에서 예약 조회, 생성, 수정 및 문제 선택 UI 구현",
            "dependencies": [
              "6.1",
              "6.2",
              "6.3",
              "6.4"
            ],
            "details": "학생 대시보드에 잔여 이용권 표시, 이번 주 예약 가능한 슬롯 목록, 기존 예약 관리(수정/취소), 당일 예약에서 문제 선택 버튼 구현. 반응형 디자인으로 모바일 친화적 UI 구성. 예약 상태별 시각적 구분(예약됨/문제선택완료/완료), 날짜/시간 선택 컴포넌트, 확인 모달 등 사용자 경험 개선 요소 포함.",
            "status": "done",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 7,
        "title": "피드백 페이지 및 채점 시스템",
        "description": "교사의 채점(4항목), 서면 피드백, 체크리스트 관리와 학생의 복기 입력 기능 구현",
        "details": "GET /api/sessions/:id/feedback-page로 피드백 페이지 데이터 조회(problemSnapshot, scores, teacherFeedback, checklistItems, studentReflection, canShowProblem). 교사 전용: POST /api/teacher/sessions/:id/grade로 4항목 채점(실기/전공지식/개별역량/태도), POST /api/teacher/sessions/:id/feedback로 서면 피드백, POST|PATCH|DELETE /api/teacher/sessions/:id/checklist로 체크리스트 관리. 학생 전용: PATCH /api/sessions/:id/reflection로 복기 입력, POST /api/sessions/:id/checklist/:itemId/toggle로 체크 완료.",
        "testStrategy": "피드백 페이지 데이터 조회 테스트, 채점 시스템 검증, 서면 피드백 CRUD 테스트, 체크리스트 관리 기능 확인, 복기 입력 및 체크 토글 테스트",
        "priority": "medium",
        "dependencies": [
          6
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "피드백 페이지 데이터 조회 API 구현",
            "description": "GET /api/sessions/:id/feedback-page API를 구현하여 problemSnapshot, scores, teacherFeedback, checklistItems, studentReflection, canShowProblem 데이터를 조회하는 기능",
            "dependencies": [],
            "details": "세션 ID로 피드백 페이지에 필요한 모든 데이터를 조회하는 API 엔드포인트 구현. 문제 스냅샷, 채점 결과, 교사 피드백, 체크리스트 항목, 학생 복기, 문제 표시 권한을 포함한 응답 반환",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "4항목 채점 시스템 API 구현",
            "description": "교사 전용 POST /api/teacher/sessions/:id/grade API를 구현하여 실기, 전공지식, 개별역량, 태도 4항목 채점 기능",
            "dependencies": [
              "7.1"
            ],
            "details": "교사가 학생의 세션에 대해 4개 항목(실기/전공지식/개별역량/태도)별로 점수를 입력할 수 있는 API 구현. 점수 범위 검증 및 데이터베이스 저장 처리",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "서면 피드백 관리 API 구현",
            "description": "교사 전용 POST /api/teacher/sessions/:id/feedback API를 구현하여 서면 피드백 작성 및 수정 기능",
            "dependencies": [
              "7.1"
            ],
            "details": "교사가 학생에게 제공할 서면 피드백을 작성하고 수정할 수 있는 API 구현. 텍스트 길이 제한 및 저장 처리",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "체크리스트 관리 CRUD API 구현",
            "description": "교사 전용 POST/PATCH/DELETE /api/teacher/sessions/:id/checklist API를 구현하여 체크리스트 항목 생성, 수정, 삭제 기능",
            "dependencies": [
              "7.1"
            ],
            "details": "교사가 세션별 체크리스트 항목을 생성, 수정, 삭제할 수 있는 CRUD API 구현. 항목 순서 관리 및 데이터 검증 포함",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "학생 복기 입력 API 구현",
            "description": "학생 전용 PATCH /api/sessions/:id/reflection API를 구현하여 복기 내용 입력 및 수정 기능",
            "dependencies": [
              "7.1"
            ],
            "details": "학생이 자신의 세션에 대한 복기 내용을 입력하고 수정할 수 있는 API 구현. 텍스트 길이 제한 및 저장 처리",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 6,
            "title": "체크리스트 완료 토글 API 구현",
            "description": "학생 전용 POST /api/sessions/:id/checklist/:itemId/toggle API를 구현하여 체크리스트 항목 완료 상태 토글 기능",
            "dependencies": [
              "7.4"
            ],
            "details": "학생이 교사가 만든 체크리스트 항목의 완료 상태를 체크/해제할 수 있는 토글 API 구현. 권한 검증 및 상태 업데이트 처리",
            "status": "done",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 8,
        "title": "학생 대시보드 및 히스토리 페이지",
        "description": "학생의 메인 대시보드, 예약 관리, 당일 문제 선택 진입점, 히스토리 조회 페이지 구현",
        "details": "/dashboard/student 페이지에서 잔여 이용권, 이번 주 슬롯, 예약/수정, 당일 문제 선택 진입점 구현. /dashboard/student/history 페이지에서 필터 없이 최신 50건 리스트 SSR로 구현. 각 항목에서 /session/:id/feedback으로 이동 가능. 테이블 형태로 날짜, 블록, 교사명, 문제 제목, 최종 레벨 표시.",
        "testStrategy": "대시보드 UI 렌더링 확인, 이용권 잔여 표시 검증, 예약 관리 기능 테스트, 히스토리 목록 SSR 로딩 확인",
        "priority": "medium",
        "dependencies": [
          7
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "학생 메인 대시보드 페이지 구현",
            "description": "/dashboard/student 페이지에서 잔여 이용권, 이번 주 슬롯 현황, 예약/수정 기능, 당일 문제 선택 진입점을 포함한 메인 대시보드 구현",
            "dependencies": [],
            "details": "학생용 메인 대시보드에서 현재 잔여 이용권 수량 표시, 이번 주 예약 가능한 슬롯 목록 표시, 예약 생성/수정 기능 구현, 당일 문제 선택 페이지로 이동할 수 있는 진입점 버튼 구현. 반응형 UI로 모바일 친화적 디자인 적용",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "학생 히스토리 페이지 SSR 구현",
            "description": "/dashboard/student/history 페이지에서 최신 50건 세션 히스토리를 SSR로 구현하고 테이블 형태로 표시",
            "dependencies": [
              "8.1"
            ],
            "details": "학생의 최근 50건 세션 히스토리를 서버 사이드 렌더링으로 구현. 테이블 형태로 날짜, 블록, 교사명, 문제 제목, 최종 레벨을 표시. 페이지네이션 없이 단순 리스트 형태로 구현하며, 각 행에서 해당 세션의 피드백 페이지로 이동 가능한 링크 제공",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "피드백 페이지 연결 및 네비게이션 구현",
            "description": "히스토리 목록에서 각 세션별 피드백 페이지(/session/:id/feedback)로의 연결 및 전체 네비게이션 구조 완성",
            "dependencies": [
              "8.2"
            ],
            "details": "히스토리 테이블의 각 행에서 클릭 시 해당 세션의 피드백 페이지로 이동하는 라우팅 구현. 세션 ID 파라미터를 정확히 전달하고, 뒤로가기 버튼 등 사용자 경험을 고려한 네비게이션 구조 완성. 로딩 상태 및 에러 처리 포함",
            "status": "done",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 9,
        "title": "교사 대시보드 및 학생 관리 페이지",
        "description": "교사의 당일 스케줄 조회, 학생별 피드백 관리, 반별 학생 현황 페이지 구현",
        "details": "/dashboard/teacher/today 페이지에서 당일 자동 스케줄(시간/순번/문제선택 여부/상태) 표시하여 피드백 페이지 이동. /dashboard/teacher/students 페이지에서 필터 없이 반별 섹션으로 학생 목록(이름, 잔여 이용권, 최근 3건 배지) 표시. /dashboard/teacher/students/:studentId로 학생별 전체 피드백 최신 50건 SSR 페이지. /dashboard/teacher에서 문제 관리 탭 구현.",
        "testStrategy": "당일 스케줄 자동 계산 확인, 학생 목록 반별 섹션 표시 검증, 학생별 피드백 히스토리 조회 테스트, 문제 관리 탭 기능 확인",
        "priority": "medium",
        "dependencies": [
          7
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "교사 당일 스케줄 자동 계산 및 표시 페이지 구현",
            "description": "/dashboard/teacher/today 페이지에서 당일 자동 스케줄을 계산하여 시간/순번/문제선택 여부/상태를 표시하고 피드백 페이지로 이동하는 기능 구현",
            "dependencies": [],
            "details": "당일 예약된 슬롯들을 자동으로 계산하여 순서대로 표시. 각 슬롯별로 학생 정보, 시간, 순번, 문제 선택 여부, 현재 상태(대기/진행중/완료)를 보여주고, 클릭 시 해당 세션의 피드백 페이지로 이동할 수 있도록 구현. SSR로 서버사이드에서 당일 스케줄 데이터를 가져와 렌더링.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "반별 학생 목록 관리 페이지 구현",
            "description": "/dashboard/teacher/students 페이지에서 반별 섹션으로 구분된 학생 목록을 표시하는 페이지 구현",
            "dependencies": [],
            "details": "필터 기능 없이 반별로 섹션을 나누어 학생 목록을 표시. 각 학생별로 이름, 잔여 이용권 수량, 최근 3건의 배지 정보를 카드 형태로 표시. 학생 카드 클릭 시 개별 학생 상세 페이지로 이동. 반별 구분은 접은/펼친 형태로 구현하여 관리 편의성 제공.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "학생별 피드백 히스토리 SSR 페이지 구현",
            "description": "/dashboard/teacher/students/:studentId 경로에서 특정 학생의 전체 피드백 히스토리를 최신 50건까지 SSR로 표시하는 페이지 구현",
            "dependencies": [],
            "details": "특정 학생의 모든 세션 피드백을 최신순으로 50건까지 서버사이드에서 렌더링. 날짜, 블록, 문제 제목, 점수, 피드백 내용, 체크리스트 완료 상태 등을 테이블 형태로 표시. 각 피드백 항목 클릭 시 해당 세션의 상세 피드백 페이지로 이동 가능. 페이지네이션 없이 스크롤 형태로 구현.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "교사 대시보드 문제 관리 탭 구현",
            "description": "/dashboard/teacher 페이지에서 문제 관리 기능을 위한 탭 UI 및 기본 문제 목록 표시 기능 구현",
            "dependencies": [],
            "details": "교사 대시보드 메인 페이지에서 탭 형태로 문제 관리 섹션을 추가. 현재 등록된 문제들의 목록을 표시하고, 각 문제의 제목, 레벨, 공개 상태, 등록일 등을 테이블 형태로 보여줌. 문제별 공개/비공개 토글 기능과 문제 상세 보기 링크 제공. 새 문제 등록을 위한 버튼도 포함.",
            "status": "done",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 10,
        "title": "배포 환경 구성 및 로깅 시스템",
        "description": "EC2 배포 설정, Nginx 리버스 프록시 구성, PM2 프로세스 관리, 감사 로깅 시스템 구현",
        "details": "EC2 단일 인스턴스에 Next.js 앱 배포, Nginx 리버스 프록시 설정, PM2로 프로세스 관리. 감사 로깅 구현: 로그인 시도/성공, 계정·이용권·슬롯 변경, 예약 생성·수정, 문제 공개, 채점·피드백·체크 토글. 환경변수 보안 설정, TZ=Asia/Seoul 타임존 설정. Supabase 백업 설정 확인.",
        "testStrategy": "EC2 배포 성공 확인, Nginx 프록시 동작 검증, PM2 프로세스 재시작 테스트, 감사 로깅 기록 확인, 타임존 설정 검증",
        "priority": "medium",
        "dependencies": [
          8,
          9
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "EC2 인스턴스 설정 및 Next.js 애플리케이션 배포",
            "description": "AWS EC2 인스턴스 생성, Node.js 환경 구성, Next.js 애플리케이션 빌드 및 배포 설정",
            "dependencies": [],
            "details": "EC2 인스턴스 생성(Ubuntu 20.04 LTS), Node.js 18+ 설치, PM2 글로벌 설치, Git 저장소 클론, npm install 실행, Next.js 프로덕션 빌드(.next 폴더 생성), 환경변수 설정(.env.production), 보안 그룹 설정(80, 443, 22 포트 허용)",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Nginx 리버스 프록시 구성 및 도메인 연결",
            "description": "Nginx 설치 및 설정, SSL 인증서 적용, 리버스 프록시를 통한 Next.js 앱 연결",
            "dependencies": [
              "10.1"
            ],
            "details": "Nginx 설치, /etc/nginx/sites-available/default 설정 파일 작성, upstream 블록으로 localhost:3000 연결, SSL 인증서 설정(Let's Encrypt), 정적 파일 직접 서빙 설정, gzip 압축 활성화, 보안 헤더 추가, Nginx 서비스 시작 및 자동 시작 설정",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "PM2 프로세스 관리자 설정 및 무중단 배포 구성",
            "description": "PM2를 통한 Next.js 애플리케이션 프로세스 관리, 자동 재시작 및 로그 관리 설정",
            "dependencies": [
              "10.1"
            ],
            "details": "ecosystem.config.js 파일 생성(앱 이름, 스크립트, 인스턴스 수, 환경변수 설정), pm2 start 명령으로 앱 실행, pm2 startup으로 시스템 부팅 시 자동 시작 설정, pm2 save로 현재 프로세스 목록 저장, 로그 로테이션 설정, 무중단 배포를 위한 pm2 reload 스크립트 작성",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "포괄적인 감사 로깅 시스템 구현",
            "description": "로그인, 계정 관리, 예약, 문제 관리, 채점 등 모든 주요 액션에 대한 감사 로그 시스템 구현",
            "dependencies": [],
            "details": "audit_logs 테이블 생성(id, user_id, action, resource_type, resource_id, details, ip_address, user_agent, timestamp), 로그인 시도/성공 로깅, 계정·이용권·슬롯 변경 로깅, 예약 생성·수정 로깅, 문제 공개 로깅, 채점·피드백·체크 토글 로깅, 공통 로깅 미들웨어 함수 구현, TZ=Asia/Seoul 타임존 설정 적용",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "환경변수 보안 설정 및 Supabase 백업 구성 확인",
            "description": "프로덕션 환경변수 보안 설정, Supabase 자동 백업 확인 및 복구 절차 문서화",
            "dependencies": [
              "10.1",
              "10.4"
            ],
            "details": "환경변수 파일 권한 설정(600), 중요 환경변수 암호화 저장, Supabase 프로젝트의 자동 백업 설정 확인(Point-in-Time Recovery), 수동 백업 스크립트 작성, 백업 복구 절차 문서 작성, 모니터링 및 알림 설정(PM2 앱 상태, Nginx 상태), 로그 파일 로테이션 및 보관 정책 설정",
            "status": "pending",
            "testStrategy": ""
          }
        ]
      }
    ],
    "metadata": {
      "created": "2025-09-07T06:28:34.392Z",
      "updated": "2025-09-07T15:41:54.506Z",
      "description": "Tasks for master context"
    }
  }
}